pipeline {
    agent any

    tools {
        // Assure-toi que "Node 16" est bien le nom de la configuration dans Jenkins
        nodejs 'Node 16' // Remplace 'Node 16' par le nom exact de ta configuration Node.js
    }

    environment {
        // Variables d'environnement
        DOCKER_IMAGE = "furious-duck/contest-app"  // Remplace par le nom de ton image Docker
        DATABASE_URL = "postgresql://admin:your_password@postgres:5432/contest_db" // URL PostgreSQL
    }

    stages {
        // Étape 1 : Vérification du code source (Checkout)
        stage('Checkout') {
            steps {
                // Récupère le code source depuis le dépôt Git
                checkout scm
            }
        }

        // Étape 2 : Installation de Yarn
        stage('Install Yarn') {
            steps {
                script {
                    // Vérifie si yarn est installé, sinon l'installer
                    sh 'npm install -g yarn'
                }
            }
        }

        // Étape 3 : Installation des dépendances
        stage('Install Dependencies') {
            steps {
                script {
                    // Installer les dépendances Node.js et React
                    sh 'npm cache clean --force'
                    sh 'npm install --legacy-peer-deps --verbose' // Utilise npm pour installer les dépendances dans l'image
                }
            }
        }

        
        // Étape 4 : Tests
        stage('Run Tests') {
            steps {
                script {
                    // Exécuter les tests unitaires ou d’intégration
                    sh 'npm run test'
                }
            }
        }
        
        

        // Étape 5 : Construction de l'image Docker
        stage('Build Docker Image') {
            steps {
                script {
                    // Construction de l'image Docker pour l'application
                    sh "docker build -t ${DOCKER_IMAGE}:${env.BUILD_NUMBER} ."
                }
            }
        }

        // Étape 6 : Push de l'image Docker vers un registre (si nécessaire)
        stage('Push Docker Image') {
            steps {
                script {
                    // Authentification Docker (optionnel, selon si tu utilises un registre privé)
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin"
                    }
                    // Push de l'image Docker vers le registre
                    sh "docker push ${DOCKER_IMAGE}:${env.BUILD_NUMBER}"
                }
            }
        }

        // Étape 7 : Déploiement en environnement de développement
        stage('Deploy to Development') {
            steps {
                script {
                    // Lancer le container pour l'environnement de développement
                    sh """
                    docker run -d --name contest-dev --network furious-ducks-network \
                    -e DATABASE_URL=${DATABASE_URL} -p 3000:3000 ${DOCKER_IMAGE}:${env.BUILD_NUMBER}
                    """
                }
            }
        }

        // Étape 8 : Déploiement en pré-production
        stage('Deploy to Pre-production') {
            steps {
                script {
                    // Lancer le container pour l'environnement de pré-production
                    sh """
                    docker run -d --name contest-preprod --network furious-ducks-network \
                    -e DATABASE_URL=${DATABASE_URL} -p 3001:3000 ${DOCKER_IMAGE}:${env.BUILD_NUMBER}
                    """
                }
            }
        }
    }

    post {
        // Notifications ou actions post-pipeline
        always {
            echo "Pipeline terminé, nettoyage..."
            // Nettoyage d'images Docker obsolètes
            sh "docker rmi ${DOCKER_IMAGE}:${env.BUILD_NUMBER} || true"
        }
        failure {
            // Envoie une notification en cas d'échec
            echo "Pipeline échoué."
        }
    }
}




