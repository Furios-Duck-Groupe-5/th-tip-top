pipeline {
    agent any

    tools {
        nodejs 'Node 16' // Remplace 'Node 16' par le nom exact de ta configuration Node.js dans Jenkins
    }

    environment {
        DOCKER_IMAGE = "furious-duck/contest-app"  // Nom de l'image Docker
        DATABASE_URL = "postgresql://admin:your_password@postgres:5432/contest_db" // URL PostgreSQL
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm // Récupère le code source depuis le dépôt Git
            }
        }

        stage('Install Yarn') {
            steps {
                script {
                    sh 'npm install -g yarn' // Installe Yarn si non disponible
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    sh 'npm cache clean --force'
                    sh 'npm install --legacy-peer-deps --verbose' // Installe les dépendances du projet
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    sh 'npm run test' // Exécute les tests unitaires ou d'intégration
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE}:${env.BUILD_NUMBER} ." // Crée l'image Docker
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin"
                    }
                    sh "docker push ${DOCKER_IMAGE}:${env.BUILD_NUMBER}" // Pousse l'image Docker vers Docker Hub
                }
            }
        }

        stage('Deploy to Development') {
            steps {
                script {
                    sh """
                    docker run -d --name contest-dev --network furious-ducks-network \
                    -e DATABASE_URL=${DATABASE_URL} -p 3000:3000 ${DOCKER_IMAGE}:${env.BUILD_NUMBER}
                    """ // Déploiement en environnement de développement
                }
            }
        }

        stage('Deploy to Pre-production') {
            steps {
                script {
                    sh """
                    docker run -d --name contest-preprod --network furious-ducks-network \
                    -e DATABASE_URL=${DATABASE_URL} -p 3001:3000 ${DOCKER_IMAGE}:${env.BUILD_NUMBER}
                    """ // Déploiement en environnement de pré-production
                }
            }
        }
    }

    post {
        always {
            echo "Nettoyage du pipeline..."
            sh "docker rmi ${DOCKER_IMAGE}:${env.BUILD_NUMBER} || true" // Nettoie l'image Docker pour libérer de l’espace
            cleanWs() // Nettoie l’espace de travail Jenkins
        }
        failure {
            echo "Échec du pipeline, veuillez vérifier les logs pour plus d’informations." // Message d'échec
        }
    }
}



